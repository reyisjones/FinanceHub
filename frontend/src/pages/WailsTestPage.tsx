import { useEffect, useState } from 'react';
import { Box, Typography, Paper, Grid, Button } from '@mui/material';

// Wails runtime imports - these will be generated by Wails CLI
import { Greet, GetFinanceTopics, GetSystemInfo } from '../wailsjs/go/main/App';

interface SystemInfo {
  os: string;
  arch: string;
  goVersion: string;
  numCPU: string;
  appVersion: string;
  appName: string;
}

export default function WailsTestPage() {
  const [greeting, setGreeting] = useState('');
  const [topics, setTopics] = useState<any[]>([]);
  const [systemInfo, setSystemInfo] = useState<SystemInfo | null>(null);
  const [userName, setUserName] = useState('');

  useEffect(() => {
    // Load initial data
    loadSystemInfo();
    loadTopics();
  }, []);

  const loadSystemInfo = async () => {
    try {
      const info = await GetSystemInfo();
      setSystemInfo(info as unknown as SystemInfo);
    } catch (error) {
      console.error('Failed to get system info:', error);
    }
  };

  const loadTopics = async () => {
    try {
      const allTopics = await GetFinanceTopics();
      setTopics(allTopics);
    } catch (error) {
      console.error('Failed to get topics:', error);
    }
  };

  const handleGreet = async () => {
    try {
      const message = await Greet(userName);
      setGreeting(message);
    } catch (error) {
      console.error('Failed to greet:', error);
    }
  };

  return (
    <Box>
      <Typography variant="h4" gutterBottom>
        Wails Integration Test
      </Typography>

      {/* Greeting Section */}
      <Paper sx={{ p: 3, mb: 3 }}>
        <Typography variant="h6" gutterBottom>
          Test Greet Function
        </Typography>
        <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>
          <input
            type="text"
            value={userName}
            onChange={(e) => setUserName(e.target.value)}
            placeholder="Enter your name"
            style={{ padding: '8px', flex: 1 }}
          />
          <Button variant="contained" onClick={handleGreet}>
            Greet Me
          </Button>
        </Box>
        {greeting && (
          <Typography variant="body1" color="primary">
            {greeting}
          </Typography>
        )}
      </Paper>

      {/* System Info Section */}
      <Paper sx={{ p: 3, mb: 3 }}>
        <Typography variant="h6" gutterBottom>
          System Information
        </Typography>
        {systemInfo && (
          <Grid container spacing={2}>
            <Grid item xs={6}>
              <Typography><strong>App Name:</strong> {systemInfo.appName}</Typography>
            </Grid>
            <Grid item xs={6}>
              <Typography><strong>Version:</strong> {systemInfo.appVersion}</Typography>
            </Grid>
            <Grid item xs={6}>
              <Typography><strong>OS:</strong> {systemInfo.os}</Typography>
            </Grid>
            <Grid item xs={6}>
              <Typography><strong>Architecture:</strong> {systemInfo.arch}</Typography>
            </Grid>
            <Grid item xs={6}>
              <Typography><strong>Go Version:</strong> {systemInfo.goVersion}</Typography>
            </Grid>
            <Grid item xs={6}>
              <Typography><strong>CPU Cores:</strong> {systemInfo.numCPU}</Typography>
            </Grid>
          </Grid>
        )}
      </Paper>

      {/* Topics Section */}
      <Paper sx={{ p: 3 }}>
        <Typography variant="h6" gutterBottom>
          Finance Topics ({topics.length})
        </Typography>
        <Grid container spacing={2}>
          {topics.map((topic) => (
            <Grid item xs={12} sm={6} md={4} key={topic.id}>
              <Paper sx={{ p: 2, bgcolor: 'background.default' }}>
                <Typography variant="subtitle1" fontWeight="bold">
                  {topic.title}
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  {topic.description.substring(0, 100)}...
                </Typography>
              </Paper>
            </Grid>
          ))}
        </Grid>
      </Paper>
    </Box>
  );
}
