name: Test Suite

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  workflow_dispatch:

env:
  GO_VERSION: '1.23'
  NODE_VERSION: '18'

jobs:
  backend-tests:
    name: Backend Tests (Go)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download dependencies
        run: go mod download

      - name: Run Go tests
        run: go test ./... -v -race -coverprofile=coverage.out

      - name: Generate coverage report
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: go-coverage
          path: |
            coverage.out
            coverage.html
          retention-days: 30

  frontend-tests:
    name: Frontend Tests (TypeScript/React)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: frontend
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: frontend-coverage
          path: frontend/coverage/
          retention-days: 30

  security-audit:
    name: Security & Compliance Audit
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Run security audit
        shell: pwsh
        run: |
          ./scripts/audit.ps1 -OutputFormat json
        continue-on-error: true

      - name: Upload audit results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: audit-results
          path: audit-results.json
          retention-days: 30

  script-validation:
    name: Script Validation Tests
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run script validation tests
        shell: pwsh
        run: |
          ./scripts/test-scripts.ps1

  dependency-check:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run npm audit
        working-directory: frontend
        run: |
          npm audit --audit-level=high
        continue-on-error: true

      - name: Check Go vulnerabilities
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...
        continue-on-error: true

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-audit, script-validation, dependency-check]
    if: always()
    
    steps:
      - name: Check test results
        run: |
          echo "Backend Tests: ${{ needs.backend-tests.result }}"
          echo "Frontend Tests: ${{ needs.frontend-tests.result }}"
          echo "Security Audit: ${{ needs.security-audit.result }}"
          echo "Script Validation: ${{ needs.script-validation.result }}"
          echo "Dependency Check: ${{ needs.dependency-check.result }}"
          
          if [ "${{ needs.backend-tests.result }}" != "success" ] || [ "${{ needs.frontend-tests.result }}" != "success" ]; then
            echo "❌ Critical tests failed!"
            exit 1
          else
            echo "✅ All critical tests passed!"
          fi
